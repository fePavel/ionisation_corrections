using QuadGK, Printf
using Interpolations
using LinearAlgebra
using PyPlot
pygui(true)


const h, c = 6.626e-27, 2.998e10
const σ0, λth = 6.3e-18, 91.2e-7
const β = 2.6e-13
const Inorm = 100.0
const xmax = 100*3.2e18 # 100 пк

#HI 13.598434599702    10 -- 632
#DI 13.602134636569    3400 -- 174058

λth = 91.2e-7 * 13.5984 / 13.6021

# Линейный профиль плотности
nH(x) = 1.0 * (0.2 + 0.5*x/xmax)
#nH(x) = 1

# Спектр и сечение
Iλ(λ) = λ < λth ? Inorm*(λ/λth)^(-1.0) : 0.0
σλ(λ) = λ < λth ? σ0*(λ/λth)^3 : 0.0


function resample_curve(x, y; n_points=length(x), method=:linear)
    dists = [((x[i+1]-x[i])^2+(y[i+1]-y[i])^2)^0.5 for i in 1:length(x)-1]
    cumulative = [0.0; cumsum(dists)]
    total_length = cumulative[end]
    
    s_new = range(0, total_length, length=n_points)
    
    if method == :linear
        itp_x = linear_interpolation(cumulative, x, extrapolation_bc=Line())
        itp_y = linear_interpolation(cumulative, y, extrapolation_bc=Line())
        new_x = itp_x.(s_new)
        new_y = itp_y.(s_new)
        
    elseif method == :spline
        spl_x = Spline1D(cumulative, x; k=3, s=0.0)
        spl_y = Spline1D(cumulative, y; k=3, s=0.0)
        new_x = spl_x(s_new)
        new_y = spl_y(s_new)
        
    else
        error("Unknown method: $method")
    end
    
    return new_x, new_y
end


function calculate()
    xgrid = range(0, xmax, length=100)
    α = zeros(length(xgrid))
    α[1] = 0.4 # Граничное условие
    
    for iter in 1:202
        α_old = copy(α)
        # if iter == 11
        #     xgrid_new = 
        # end
        for i in 1:length(xgrid)
            x = xgrid[i]
            
            α_f = x -> linear_interpolation(xgrid, α_old)(x)
            τ(λ) = σλ(λ) * quadgk(x′->nH(x′)*(1-α_f(x')), 0, x)[1]
            
            # Скорость ионизации
            Γ_ion = quadgk(λ->σλ(λ)*Iλ(λ)/(h*c/λ)*exp(-τ(λ)), 0, λth)[1]
            d = Γ_ion / (β*nH(x))
            α[i] = -d/2 + 0.5*(d^2 + 4d)^0.5
        end
            
        # Вывод текущего состояния
        println("Итерация ", iter, ": ", maximum(abs.(α - α_old)))
        #        for (i, x) in enumerate(xgrid)
        #            @printf("x = %5.2f пк: α = %.4f, nH = %.2f см⁻³\n", 
        #                   abs(x)/3.086e18, α[i], nH(x))
        #        end
        maximum(abs.(α - α_old)) < 1e-3 && break
        #	plot(xgrid, α .* nH.(xgrid))
        # scatter(xgrid, α)

        if iter % 10 == 1 && iter > 1
            xx = xgrid[end]
            xgrid, α = resample_curve(xgrid./xx, α)
            xgrid = xgrid .* xx
        end
    end
    
    return xgrid, α
end

x, α = calculate()

plot(x, α)
scatter(x, α)


# print(x)
# print(α)

x_H=[0.0, 4.772300897520841e18, 9.544601485519692e18, 1.4316901726276108e19, 1.908920157780047e19, 2.386150099316891e19, 2.863379991973205e19, 3.340609829816867e19, 3.817839606134827e19, 4.295069313295801e19, 4.772298942583448e19, 5.2495284839926145e19, 5.7267579259788394e19, 6.203987255148185e19, 6.68121645587052e19, 7.1584455097933726e19, 7.63567439522567e19, 8.112903086349204e19, 8.590131552199667e19, 9.067359755335426e19, 9.544587650077637e19, 1.0021815180153397e20, 1.0499042275493742e20, 1.0976268847814317e20, 1.1453494784407405e20, 1.1930719939247848e20, 1.2407944119963664e20, 1.2885167068259072e20, 1.3362388429631262e20, 1.3839607704913723e20, 1.4316824166083188e20, 1.4351354120423168e20, 1.4351620707711038e20, 1.4351856365876978e20, 1.435215039501583e20, 1.4352479827067676e20, 1.4352915558043474e20, 1.4353568228117643e20, 1.4354621776982206e20, 1.4356471253898704e20, 1.4362466501817136e20, 1.4386865529439588e20, 1.4431389066734959e20, 1.4493797947428276e20, 1.4572088264088589e20, 1.4664710498815723e20, 1.4770464967982062e20, 1.4888414280053942e20, 1.501782162660595e20, 1.515810548944007e20, 1.5308805700435064e20, 1.546955757099455e20, 1.564007184075157e20, 1.582011887232051e20, 1.6009515978593776e20, 1.620811708704052e20, 1.6415804168651624e20, 1.6632480018169014e20, 1.685806208719808e20, 1.7092477156120268e20, 1.733565669338042e20, 1.7587532797661485e20, 1.7848034653718528e20, 1.8117085458856785e20, 1.8394599795988313e20, 1.8680481442086656e20, 1.8974621608538083e20, 1.9276897613047002e20, 1.9587171982023957e20, 1.990529197842989e20, 2.0231089543600944e20, 2.0564381633445698e20, 2.090497092045873e20, 2.125264682410521e20, 2.1607186824124236e20, 2.196835800487593e20, 2.2335918774546484e20, 2.2709620701139314e20, 2.30892104077998e20, 2.34744314730109e20, 2.3865026286233862e20, 2.4260737816198228e20, 2.466131125673799e20, 2.5066495523280716e20, 2.5476044581316005e20, 2.588971859596303e20, 2.6307284898791008e20, 2.672851877409244e20, 2.7153204071745585e20, 2.7581133657600085e20, 2.801210971502133e20, 2.84459439129349e20, 2.888245745655378e20, 2.9321481037098353e20, 2.976285469638434e20, 3.0206427621301184e20, 3.065205788206288e20, 3.1099612126795786e20, 3.1548965243624515e20, 3.1999999999999993e20]

x_D = [0.0, 4.772412792711406e18, 9.54482527535856e18, 1.4317237410148297e19, 1.9089649155008274e19, 2.386206046292041e19, 2.8634471281127743e19, 3.3406881550184763e19, 3.817929120281761e19, 4.2951700162546475e19, 4.7724108342012666e19, 5.249651564093532e19, 5.7268921943597834e19, 6.204132711573712e19, 6.681373100066359e19, 7.158613341438321e19, 7.635853413941379e19, 8.113093291687141e19, 8.590332943624308e19, 9.067572332202356e19, 9.544811411604701e19, 1.0022050125382074e20, 1.0499288403236774e20, 1.0976526156583497e20, 1.1453763272312114e20, 1.1930999603849547e20, 1.2408234958062313e20, 1.2885469075571248e20, 1.336270160028949e20, 1.3839932030659817e20, 1.4317159634088259e20, 1.4348020803244514e20, 1.434828724916199e20, 1.4348522133183178e20, 1.4348816047691203e20, 1.4349147474904236e20, 1.4349582788118174e20, 1.4350238830051056e20, 1.435129560799751e20, 1.435315571131527e20, 1.435923757110574e20, 1.4383804064443199e20, 1.4428473432272696e20, 1.4491008362875596e20, 1.4569408696643106e20, 1.4662128443270036e20, 1.4767970560355507e20, 1.4885999685465263e20, 1.5015480594541416e20, 1.5155833022935856e20, 1.530659780601432e20, 1.546741106679114e20, 1.563798420703859e20, 1.5818088133243532e20, 1.6007540607067095e20, 1.620619592697264e20, 1.6413936370231607e20, 1.663066498307145e20, 1.6856299421387227e20, 1.7090766628545485e20, 1.733399819931722e20, 1.7585926325807016e20, 1.7846480256425846e20, 1.811558322510732e20, 1.8393149826868727e20, 1.8679083828662862e20, 1.897327641211098e20, 1.9275604847833937e20, 1.958593160034139e20, 1.9904103858457438e20, 2.0229953479789484e20, 2.056329732959569e20, 2.0903937985444646e20, 2.1251664770163245e20, 2.1606255067558468e20, 2.196747586897903e20, 2.2335085494479264e20, 2.2708835430472437e20, 2.3088472226394368e20, 2.3473739395902266e20, 2.386437927318586e20, 2.426013478161103e20, 2.4660751079619664e20, 2.5065977057028427e20, 2.547556666309315e20, 2.588928005550224e20, 2.6306884566495596e20, 
2.672815548835005e20, 2.7152876685404576e20, 2.7580841043591247e20, 2.8011850771134457e20, 2.8445717565780833e20, 2.8882262664758608e20, 2.9321316793787594e20, 2.9762720031022075e20, 3.020632160095253e20, 3.0651979612148846e20, 3.1099560751407904e20, 3.15489399454638e20, 3.1999999999999993e20]

a_H = [0.9992127148270811, 0.9991810705068929, 0.9991489735734831, 0.9991163763478426, 0.999083227306869, 0.9990494706424897, 0.999015045749843, 0.9989798866357091, 0.9989439212289426, 0.9989070705756831, 0.9988692478954704, 0.9988303574696147, 0.9987902933252713, 0.9987489376692906, 0.9987061590136932, 0.998661809917337, 0.9986157242472018, 0.9985677138312212, 0.9985175643348612, 0.9984650301359466, 0.9984098278919191, 0.9983516283793961, 0.9982900460190649, 0.9982246252522486, 0.998154822562924, 0.9980799823608777, 0.9979993040257682, 0.9979117959113353, 0.9978162095720222, 0.9977109430082578, 0.9975938893626051, 0.989280229111138, 0.9756776935620266, 0.9603410279377425, 0.9442846153794324, 0.927977154777273, 0.9117003365510685, 0.8956311561626613, 0.8798797502889761, 0.8645090571304817, 0.849498703584942, 0.8345987535572861, 0.8197510051154955, 0.8049660064067483, 0.7902547533282163, 0.775624950108017, 0.7610823205089208, 0.7466315586477763, 0.7322768714438543, 0.7180223038046845, 0.7038719368718774, 0.6898300087989598, 0.6759009867225882, 0.6620896069247876, 0.6484008933845419, 0.6348401608642023, 0.6214130062272052, 0.608125290199035, 0.5949831108956569, 0.5819927699368935, 0.5691607317073832, 0.5564935762439834, 0.5439979462642772, 0.5316804889690019, 0.519547793423197, 0.5076063245217254, 0.4958623547512939, 0.48432189515095525, 0.4729906270254124, 0.46187383606182064, 0.45097635052658674, 0.44030248516465986, 0.4298559922872055, 0.4196400213186904, 0.40965708779251186, 0.3999090524525012, 0.39039711075730993, 0.38112179271914115, 0.37208297266054824, 0.3632798881634056, 0.35471116722867635, 0.34637486247475563, 0.3382684910805759, 0.33038907912639637, 0.32273320899459823, 0.3152970685557569, 0.30807650097044487, 0.3010670540725452, 0.2942640284534785, 0.2876625235279542, 0.281257481021691, 0.2750437254729131, 0.2690160014773358, 0.2631690075275974, 0.2574974264011347, 0.2519959521350678, 0.24665931369349484, 0.24148229548309075, 0.23645975490889615, 0.23158663718567363]

a_D = [0.9992122870171443, 0.9991806235052536, 0.9991485068532029, 0.9991158893209331, 0.9990827193182668, 0.9990489409623251, 0.999014493566392, 0.9989793110455025, 0.998943321226136, 0.9989064450397223, 0.9988685955764822, 0.998829676971468, 0.9987895830852267, 0.9987481959344677, 0.9987053838123074, 0.9986609990247644, 0.9986148751442556, 0.998566823653789, 0.9985166298119452, 0.9984640475124706, 0.9984087928322083, 0.9983505358446223, 0.9982888901102456, 0.9982233990058944, 0.9981535176811462, 0.9980785888486707, 0.9979978096945672, 0.997910185682997, 0.9978144644787221, 0.9977090387107808, 0.9975917929595823, 0.9891865624033329, 0.975562471781803, 0.9602171638688208, 0.9441569180216742, 0.9278483756030012, 0.9115722473045915, 0.8955048322945829, 0.8797559030167501, 0.864387998463227, 0.8493792766433068, 0.8344793391797043, 0.8196316780368764, 0.8048468434313949, 0.7901358070094782, 0.7755062500971317, 0.7609638843602067, 0.7465133978612573, 0.7321589950605489, 0.717904720612912, 0.7037546567839534, 0.6897130437191789, 0.6757843510962739, 0.6619733180823101, 0.6482849717490116, 0.6347246300640765, 0.6212978931380778, 0.6080106249282924, 0.5948689267171043, 0.5818791031784545, 0.5690476215927106, 0.5563810646877827, 0.5438860776210046, 0.5315693097351359, 0.5194373518943436, 0.5074966704072441, 0.49575353875080747, 0.4842139684988677, 0.47288364101127645, 0.46176784153591544, 0.45087139740125326, 0.4401986219226856, 0.4297532655087579, 0.4195384752379515, 0.40955676389424933, 0.3998099891174033, 0.39029934296308116, 0.3810253518022589, 0.37198788614133976, 0.36318617963487443, 0.3546188563074167, 0.3462839648104573, 0.33817901841911985, 0.3303010394204028, 0.32264660655455774, 0.31521190423450013, 0.3079927723736799, 0.30098475578843903, 0.2941831522947276, 0.2875830587804288, 0.28117941469445623, 0.2749670425452172, 0.26894068513893277, 0.26309503940952744, 0.25742478679477854, 0.2519246201979249, 0.24658926764068065, 
0.24141351276401868, 0.236392212368993, 0.23152031121329586]

dx_H_1 = [x_H[i] - x_H[i-1] for i in 2:length(x_H)]
dx_D_1 = [x_D[i] - x_D[i-1] for i in 2:length(x_D)]
H_1 = sum(a_H[2:end].*dx_H_1)
D_1 = sum(a_D[2:end].*dx_D_1)
H_2 = sum(a_H[1:end-1].*dx_H_1)
D_2 = sum(a_D[1:end-1].*dx_D_1)

D_1/H_1
D_2/H_2

D_to_H = 0.5 * (D_1/H_1 + D_2/H_2)

 